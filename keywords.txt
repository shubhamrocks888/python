print (False)               -----> False 
print (True)                -----> True

print (True + True + True)  -----> 3
print (True + False + False)-----> 1

2. None :   This is a special constant used to denote a null value or a void. Its important to remember, 0,
            any empty container(e.g empty list) do not compute to None.
            It is an object of its datatype – NoneType. It is not possible to create multiple None objects and can assign them to variables.

3. and :    This a logical operator in python. “and” Return the first false value .if not found return last.
            print(3 and 0) returns 0
            print (3 and 10) returns 10

4. or  :    This a logical operator in python. “or” Return the first True value.if not found return last.
            print(3 or 0) returns 3
            print(3 or 10) returns 3
            print(0 or 0 or 3 or 10 or 0) returns 3

5.  print (None == 0) returns False

6.  x=None
    y=None
    print (x=y) returns False
 
7. assert : The assert keyword is used when debugging code.
            The assert keyword lets you test if a condition in your code returns True, if not, the program will raise an AssertionError.

            x = "hello"

            #if condition returns True, then nothing happens:
            assert x == "hello"

            #if condition returns False, AssertionError is raised:
            assert x == "goodbye"

            ex: assert 5 < 3, "5 is not smaller than 3" returns AssertionError is raised
                assert 5 > 3, "5 is not smaller than 3" returns Nothing

8. is :	   This keyword is used to test object identity, i.e to check if both the objects take same memory location or not.
	   # using is to check object identity 
	   # string is immutable( cannot be changed once alloted) 
	   # hence occupy same memory location 
	   print (''is'')   returns True

	   # using is to check object identity 
	   # dictionary is mutable( can be changed once alloted) 
	   # hence occupy different memory location 
           print ({} is {})  returns False

9.global : This keyword is used to define a variable inside the function to be of a global scope.

	   a=5
	   def abc():
	   	global a
		a=10
	   abc()
	   print (a)

10.non-local : 	This keyword works similar to the global, but rather than global, this keyword declares 
		a variable to point to variable of outside enclosing function, in case of nested functions.

		print ("Value of a using nonlocal is : ",end="") 
		def outer(): 
    			a = 5
    			def inner(): 
        			nonlocal a  
        			a = 10
    			inner() 
    			print (a) 
  
		outer() 
11.

		How to check if a string is keyword?
	
	Python in its language defines an inbuilt module “keyword” which handles certain operations related to keywords. 
	A function “iskeyword()” checks if a string is keyword or not. Returns true if a string is keyword, else returns false.

	
#Instead of writing this massive Python code we can also code this in a different way 

#Python code to demonstrate working of iskeyword() 

# importing "keyword" for keyword operations 
import keyword 
import keyword 
# initializing strings for testing while putting them in an array 
keys = ["for", "while", "tanisha", "break", "sky", 
"elif", "assert", "pulkit", "lambda", "else", "sakshar"] 

for i in range(len(keys)): 
	# checking which are keywords 
	if keyword.iskeyword(keys[i]): 
		print(keys[i] + " is python keyword") 
	else: 
		print(keys[i] + " is not a python keyword") 


##	How to print list of all keywords?
	
	Sometimes, remembering all the keywords can be a difficult task while assigning variable names. 
	Hence a function “kwlist()” is provided in “keyword” module which prints all the 33 python keywords.

#Python code to demonstrate working of iskeyword() 

# importing "keyword" for keyword operations 
import keyword 

# printing all keywords at once using "kwlist()" 
print ("The list of keywords is : ") 
print (keyword.kwlist) 



    
